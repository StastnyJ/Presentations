{"version":3,"sources":["Pages/Main.tsx","Pages/Loading.tsx","Pages/Error.tsx","App.tsx","index.tsx"],"names":["socket","useState","lastClick","setLastClick","questions","setQuestions","newQuestion","setNewQuestion","icons","icon","FavoriteIcon","text","color","ThumbUpAltIcon","SentimentSatisfiedIcon","ThumbDownIcon","SentimentDissatisfiedIcon","Grid","container","direction","style","height","item","xs","width","maxWidth","FormControl","fullWidth","marginLeft","marginRight","InputLabel","Input","value","onChange","e","target","endAdornment","InputAdornment","position","IconButton","onClick","qId","Date","now","toString","Math","floor","random","emit","id","marginTop","map","q","Fragment","key","Typography","filter","ques","spacing","textAlign","CircularProgress","size","window","screen","Alert","severity","App","undefined","setSocket","status","setStatus","useEffect","newSock","io","on","Loading","Main","Error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.150719e7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { FormControl, Grid, IconButton, Input, InputAdornment, InputLabel, Typography } from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ThumbUpAltIcon from \"@material-ui/icons/ThumbUpAlt\";\nimport ThumbDownIcon from \"@material-ui/icons/ThumbDown\";\nimport SentimentDissatisfiedIcon from \"@material-ui/icons/SentimentDissatisfied\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport SentimentSatisfiedIcon from \"@material-ui/icons/SentimentSatisfied\"; // TODO better emoji\n\ninterface IProps {\n  socket: SocketIOClient.Socket;\n}\n\ninterface Question {\n  id: string;\n  text: string;\n}\n\nfunction genQuestionId() {\n  return Date.now().toString() + Math.floor(Math.random() * 10000);\n}\n\nexport default function ({ socket }: IProps) {\n  const [lastClick, setLastClick] = useState(0);\n  const [questions, setQuestions] = useState<Question[]>([]);\n  const [newQuestion, setNewQuestion] = useState(\"\");\n\n  const icons = [\n    { icon: FavoriteIcon, text: \"‚ù§Ô∏è\", color: \"red\" },\n    { icon: ThumbUpAltIcon, text: \"üëç\", color: \"blue\" },\n    { icon: SentimentSatisfiedIcon, text: \"üòØ\", color: \"orange\" },\n    { icon: ThumbDownIcon, text: \"üëé\", color: \"blue\" },\n    { icon: SentimentDissatisfiedIcon, text: \"üò†\", color: \"orange\" },\n  ];\n\n  return (\n    <>\n      <Grid container direction=\"column\" style={{ height: \"100%\" }}>\n        <Grid item xs={10} style={{ width: \"100%\", maxWidth: \"100%\" }}>\n          <br />\n          <FormControl fullWidth style={{ marginLeft: \"2%\", marginRight: \"2%\", width: \"96%\" }}>\n            <InputLabel>Write question</InputLabel>\n            <Input\n              value={newQuestion}\n              onChange={(e) => setNewQuestion(e.target.value)}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    onClick={() => {\n                      const qId = genQuestionId();\n                      socket.emit(\"question\", `${qId};${newQuestion}`);\n                      setQuestions([...questions, { id: qId, text: newQuestion }]);\n                      setNewQuestion(\"\");\n                    }}\n                  >\n                    <SendIcon />\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n          <br />\n          <Grid style={{ marginTop: \"24px\", marginLeft: \"2%\", width: \"96%\" }} container>\n            {questions.map((q) => (\n              <React.Fragment key={q.id}>\n                <Grid item xs={11}>\n                  <Typography>{q.text}</Typography>\n                </Grid>\n                <Grid item xs={1}>\n                  <IconButton>\n                    <DeleteIcon\n                      style={{ color: \"red\" }}\n                      onClick={() => {\n                        socket.emit(\"removeQuestion\", q.id);\n                        setQuestions(questions.filter((ques) => ques.id !== q.id));\n                      }}\n                    />\n                  </IconButton>\n                </Grid>\n              </React.Fragment>\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item xs={2} style={{ width: \"100%\", maxWidth: \"100%\" }}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Grid container spacing={3}>\n                <Grid item xs={1}>\n                  <></>\n                </Grid>\n                {icons.map((icon) => (\n                  <Grid item xs={2} style={{ textAlign: \"center\", height: \"100%\" }}>\n                    <IconButton\n                      onClick={() => {\n                        if (Date.now() - lastClick < 10000) return;\n                        socket.emit(\"reaction\", icon.text);\n                        setLastClick(Date.now());\n                      }}\n                      style={{ color: icon.color, height: \"100%\" }}\n                    >\n                      <icon.icon />\n                    </IconButton>\n                  </Grid>\n                ))}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","import React from \"react\";\nimport { CircularProgress, Typography } from \"@material-ui/core\";\n\nexport default function () {\n  return (\n    <div style={{ width: \"100%\", height: \"100%\", textAlign: \"center\" }}>\n      <CircularProgress size={window.screen.width < window.screen.height ? \"20vw\" : \"20vh\"} style={{ marginTop: \"35vh\" }} />\n      <br />\n      <br />\n      <Typography>Connecting to the presentation</Typography>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Alert } from \"@material-ui/lab\";\n\nexport default function () {\n  return (\n    <div style={{ height: \"100%\", width: \"100%\", textAlign: \"center\" }}>\n      <Alert severity=\"error\" style={{ marginTop: \"30vh\" }}>\n        Connection to the presentation lost! Try to refresh the page.\n      </Alert>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport MainPage from \"./Pages/Main\";\nimport LoadingPage from \"./Pages/Loading\";\nimport ErrorPage from \"./Pages/Error\";\nimport io from \"socket.io-client\";\n\nexport default function App() {\n  const [socket, setSocket] = useState<SocketIOClient.Socket | undefined>(undefined);\n  const [status, setStatus] = useState<\"waiting\" | \"connected\" | \"disconnected\">(\"waiting\");\n\n  useEffect(() => {\n    const newSock = io();\n    newSock.on(\"connect\", () => {\n      newSock.emit(\"role\", \"client\");\n      setStatus(\"connected\");\n    });\n    newSock.on(\"disconnect\", () => {\n      setStatus(\"disconnected\");\n    });\n    setSocket(newSock);\n  }, []);\n\n  return (\n    <>\n      {status === \"waiting\" || socket === undefined ? (\n        <LoadingPage />\n      ) : status === \"connected\" ? (\n        <MainPage socket={socket} />\n      ) : (\n        <ErrorPage />\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}