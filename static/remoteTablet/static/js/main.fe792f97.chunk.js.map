{"version":3,"sources":["components/colorPicker.tsx","components/timer.tsx","components/arrowsPanel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["color","onClick","className","style","backgroundColor","useState","secs","setSecs","useEffect","timer","setTimeout","clearTimeout","position","bottom","Typography","fontSize","float","seconds","hours","Math","floor","mins","slice","formatTime","IconButton","marginTop","height","width","iconsStyle","btnSizes","left","hexToRgba","intensity","startsWith","redHex","substring","greenHex","blueHex","undefined","parseInt","App","actColor","setActColor","oppacity","setOppacity","size","setSize","canvas","useRef","Grid","container","spacing","item","xs","ref","canvasWidth","canvasHeight","brushColor","brushRadius","lazyRadius","map","key","current","clear","undo","Slider","value","onChange","e","val","min","max","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fe792f97.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./colorPicker.css\";\n\ninterface IProps {\n  color: string;\n  onClick: () => void;\n}\n\nexport default function ({ color, onClick }: IProps) {\n  return (\n    <div\n      className=\"square\"\n      style={{\n        backgroundColor: color,\n      }}\n      onClick={onClick}\n    ></div>\n  );\n}\n","import { IconButton, Typography } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport RestoreIcon from \"@material-ui/icons/Restore\";\n\nfunction formatTime(seconds: number) {\n  const hours = Math.floor(seconds / 3600);\n  const mins = Math.floor((seconds % 3600) / 60);\n  const secs = seconds % 60;\n  return `${(\"0\" + hours).slice(-2)}:${(\"0\" + mins).slice(-2)}:${(\"0\" + secs).slice(-2)}`;\n}\n\nexport default function () {\n  const [secs, setSecs] = useState(0);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setSecs(secs + 1);\n    }, 1000);\n    return () => clearTimeout(timer);\n  });\n\n  return (\n    <div style={{ position: \"absolute\", bottom: \"0\" }}>\n      <Typography style={{ fontSize: \"6em\", float: \"left\" }}>{formatTime(secs)}</Typography>\n      <IconButton style={{ marginTop: \"1em\", height: \"4em\", width: \"4em\" }} onClick={() => setSecs(0)}>\n        <RestoreIcon style={{ height: \"2em\", width: \"2em\" }} />\n      </IconButton>\n    </div>\n  );\n}\n","import React from \"react\";\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\nimport KeyboardArrowLeftIcon from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport { IconButton } from \"@material-ui/core\";\n\nexport default function () {\n  const iconsStyle = { width: \"6em\", height: \"6em\" };\n  const btnSizes = { width: \"6em\", height: \"6em\" };\n  return (\n    <>\n      <IconButton style={{ position: \"absolute\", bottom: \"18em\", left: \"6em\", ...btnSizes }}>\n        <KeyboardArrowUpIcon style={iconsStyle} />\n      </IconButton>\n      <IconButton style={{ position: \"absolute\", bottom: \"12em\", ...btnSizes }}>\n        <KeyboardArrowLeftIcon style={iconsStyle} />\n      </IconButton>\n      <IconButton style={{ position: \"absolute\", bottom: \"12em\", left: \"12em\", ...btnSizes }}>\n        <KeyboardArrowRightIcon style={iconsStyle} />\n      </IconButton>\n      <IconButton style={{ position: \"absolute\", bottom: \"6em\", left: \"6em\", ...btnSizes }}>\n        <KeyboardArrowDownIcon style={iconsStyle} />\n      </IconButton>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Grid, IconButton, Slider } from \"@material-ui/core\";\nimport ColorPicker from \"./components/colorPicker\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport HowToVoteIcon from \"@material-ui/icons/HowToVote\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport Timer from \"./components/timer\";\nimport ArrowsPanel from \"./components/arrowsPanel\";\n\nfunction hexToRgba(color: string, intensity?: number) {\n  if (!color.startsWith(\"#\")) return color;\n  const redHex = \"0x\" + color.substring(1, 3);\n  const greenHex = \"0x\" + color.substring(3, 5);\n  const blueHex = \"0x\" + color.substring(5, 7);\n  intensity = intensity === undefined ? 100 : intensity;\n  intensity /= 100;\n  return `rgba(${parseInt(redHex)},${parseInt(greenHex)},${parseInt(blueHex)},${intensity})`;\n}\n\nfunction App() {\n  const [actColor, setActColor] = useState(\"#000000\");\n  const [oppacity, setOppacity] = useState(100);\n  const [size, setSize] = useState(4);\n\n  const canvas = useRef(null);\n\n  const colors = [\"#000000\", \"#ffffff\", \"#ff0000\", \"#00ff00\", \"#0000ff\"];\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={4}>\n        <ArrowsPanel />\n        <Timer />\n      </Grid>\n      <Grid item xs={8}>\n        <CanvasDraw\n          ref={canvas}\n          canvasWidth=\"100%\"\n          canvasHeight=\"80vh\"\n          brushColor={hexToRgba(actColor, oppacity)}\n          brushRadius={size}\n          lazyRadius={0}\n        />\n        <Grid container spacing={3}>\n          <Grid item xs={4}>\n            <Grid container>\n              {colors.map((color) => (\n                <Grid item xs={2} key={color}>\n                  <ColorPicker color={color} onClick={() => setActColor(color)} />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n          <Grid item xs={4}>\n            <Grid container>\n              <Grid item xs={3}>\n                <IconButton onClick={() => setActColor(\"rgba(0,0,0,0)\")}>\n                  <HowToVoteIcon />\n                </IconButton>\n              </Grid>\n              <Grid item xs={3}>\n                <IconButton\n                  onClick={() => {\n                    if (canvas !== null && canvas.current !== null) {\n                      // @ts-ignore\n                      canvas.current.clear();\n                    }\n                  }}\n                >\n                  <ClearIcon />\n                </IconButton>\n              </Grid>\n              <Grid item xs={3}>\n                <IconButton>\n                  <UndoIcon\n                    onClick={() => {\n                      if (canvas !== null && canvas.current !== null) {\n                        // @ts-ignore\n                        canvas.current.undo();\n                      }\n                    }}\n                  />\n                </IconButton>\n              </Grid>\n              <Grid item xs={3}>\n                <IconButton>\n                  <Brightness4Icon />\n                </IconButton>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={4}>\n            <Grid container spacing={3}>\n              <Grid item xs={8}>\n                <Slider value={oppacity} onChange={(e, val) => setOppacity(val as number)} min={0} max={100} />\n              </Grid>\n              <Grid item xs={2}>\n                <IconButton onClick={() => setSize(size + 1)}>\n                  <AddIcon />\n                </IconButton>\n              </Grid>\n              <Grid item xs={2} onClick={() => setSize(Math.max(size - 1, 1))}>\n                <IconButton>\n                  <RemoveIcon />\n                </IconButton>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}